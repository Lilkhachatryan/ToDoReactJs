{"version":3,"sources":["logo.svg","components/Header.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","newItem","name","isDone","e","value","target","this","setState","className","id","type","placeholder","onChange","handleInputChange","onClick","addItem","React","Component","ListItem","item","customClickEvent","index","Check","Delete","deletItem","List","items","map","key","onUpdateItem","App","onAddItem","bind","onDeletItem","i","j","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50216f97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { newItem: { name: '', isDone: false} };\r\n  }\r\n\r\n  handleInputChange(e){\r\n    const target = e.target;\r\n    const value = target.value;\r\n    this.setState({\r\n      newItem: { name: value, isDone: false }\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"header-container\">\r\n        <h2 className=\"header\">Lilit's ToDo List</h2>\r\n        <input \r\n          id=\"add-input\" \r\n          type=\"text\" \r\n          placeholder=\"Add more awesome things...\" \r\n          onChange={(e) => this.handleInputChange(e)} \r\n          value={this.state.newItem.name}/>\r\n        <span \r\n          className=\"add-button\"\r\n          onClick={() => this.props.addItem(this.state.newItem)}>Add</span>\r\n      </div>\r\n      )\r\n  };\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport { Delete, Check } from '@material-ui/icons';\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render () {\r\n    const item = this.props.item;\r\n    if(item.isDone) {\r\n        return (\r\n            <li \r\n              className={item.isDone ? 'checked' : ''} \r\n              onClick={() => this.props.customClickEvent(this.props.index)}>\r\n              <Check/>\r\n              {item.name}\r\n              <Delete onClick={() => this.props.deletItem(this.props.index)}/>\r\n            </li>\r\n        )\r\n    } else {\r\n        return (\r\n            <li \r\n              className={item.isDone ? 'checked' : ''} \r\n              onClick={() => this.props.customClickEvent(this.props.index)}>\r\n              {item.name}\r\n              <Delete/>\r\n            </li>\r\n          )\r\n    }\r\n    \r\n  };\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport ListItem from './ListItem';\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n  render () {\r\n    const items = this.props.items;\r\n    return (\r\n        <div className=\"list-container\">\r\n            <ul id=\"items\">\r\n                {\r\n                    items.map((item, index) => \r\n                      <ListItem \r\n                        key={index} \r\n                        item={item} \r\n                        customClickEvent={this.props.onUpdateItem} \r\n                        deletItem={this.props.deletItem}\r\n                        index={index}></ListItem>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n      )\r\n  };\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport List from './components/List';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [\r\n        { \r\n          name: 'Need to sleep',\r\n          isDone: false\r\n        },\r\n        { \r\n          name: 'Check css flexbox',\r\n          isDone: true\r\n        },\r\n        { \r\n          name: 'Do homeworks',\r\n          isDone: false\r\n        },\r\n        { \r\n          name: 'Learn ReactJs',\r\n          isDone: false\r\n        },\r\n        { \r\n          name: 'Re-check prototype',\r\n          isDone: true\r\n        },\r\n        { \r\n          name: 'ToDo List in React',\r\n          isDone: false\r\n        }\r\n      ]\r\n    }\r\n\r\n    this.onAddItem = this.onAddItem.bind(this);\r\n    this.onUpdateItem = this.onUpdateItem.bind(this);\r\n    this.onDeletItem = this.onDeletItem.bind(this);\r\n  }\r\n\r\n  onAddItem(newItem) {\r\n    this.setState((state) => {\r\n      const list = [...state.items, newItem];\r\n      return {\r\n        items: list\r\n      }\r\n    });\r\n  }\r\n\r\n  onUpdateItem(i) {\r\n    this.setState(state => {\r\n      const items = state.items.map((item, j) => {\r\n        if (j == i) {\r\n          return { name: item.name, isDone: !item.isDone };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return {\r\n        items: items\r\n      };\r\n    });\r\n  };\r\n\r\n  onDeletItem(i) {\r\n    this.setState(state => {\r\n      const items = state.items.filter((item, index) => index !== i);\r\n\r\n      return {\r\n        items\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header addItem={this.onAddItem}></Header>\r\n        <List \r\n          items={this.state.items} \r\n          onUpdateItem={this.onUpdateItem}\r\n          deletItem={this.onDeletItem}></List>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}